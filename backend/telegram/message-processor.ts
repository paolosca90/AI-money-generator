import { sendMessage, createInlineKeyboard } from "./telegram-client";
import { predict } from "../analysis/predict";
import { execute } from "../analysis/execute";
import { getPerformance } from "../analysis/performance";
import { handleVPSCommand, handleVPSSetup, handleVPSSetupCallback } from "./vps-manager";
import { handleClientCommands, checkClientFeature } from "./client-manager";
import { 
  getUserPreferences, 
  setUserPreferences, 
  getUserState, 
  setUserState, 
  clearUserState,
  USER_STATES,
  getTradingModeInfo,
  getAllTradingModesInfo,
  UserPreferences 
} from "./user-state-manager";
import { TradingStrategy } from "../analysis/trading-strategies";
import { getMT5Positions, closeMT5Position } from "../analysis/mt5-bridge";
import { getMessage, getUserLanguage } from "./i18n";

export async function processMessage(chatId: number, userId: number, text: string): Promise<void> {
  const command = text.toLowerCase().trim();
  const userLanguage = getUserLanguage(userId);

  console.log(`[PROCESSOR] Processing message from user ${userId} in chat ${chatId}: "${text}"`);

  try {
    // Check if user is in a state that requires specific handling
    const userState = await getUserState(userId);
    if (userState && userState.currentState !== USER_STATES.READY_TO_TRADE) {
      console.log(`[PROCESSOR] User ${userId} is in state ${userState.currentState}, handling state flow`);
      await handleUserStateFlow(chatId, userId, text, userState);
      return;
    }

    if (command.startsWith("/segnale") || command.startsWith("/predict")) {
      console.log(`[PROCESSOR] User ${userId} requested prediction signal: ${command}`);
      // Check if user has signal access
      const hasAccess = await checkClientFeature(userId, "basic_signals") ||
                       await checkClientFeature(userId, "advanced_signals") ||
                       await checkClientFeature(userId, "premium_signals");
      
      if (!hasAccess) {
        console.log(`[PROCESSOR] User ${userId} lacks signal access`);
        await sendMessage(chatId, getMessage('error.subscription_required', userLanguage));
        return;
      }
      
      await handlePredictCommand(chatId, command, userId);
    } else if (command.startsWith("/scalping")) {
      console.log(`[PROCESSOR] User ${userId} requested scalping strategy: ${command}`);
      await handleStrategyCommand(chatId, command, TradingStrategy.SCALPING, userId);
    } else if (command.startsWith("/intraday")) {
      console.log(`[PROCESSOR] User ${userId} requested intraday strategy: ${command}`);
      await handleStrategyCommand(chatId, command, TradingStrategy.INTRADAY, userId);
    } else if (command.startsWith("/execute") || command.startsWith("/ordina")) {
      console.log(`[PROCESSOR] User ${userId} requested trade execution: ${command}`);
      await handleExecuteCommand(chatId, command);
    } else if (command.startsWith("/stato")) {
      console.log(`[PROCESSOR] User ${userId} requested status: ${command}`);
      await handleStatusCommand(chatId, userId);
    } else if (command.startsWith("/chiudi")) {
      console.log(`[PROCESSOR] User ${userId} requested position close: ${command}`);
      await handleCloseCommand(chatId, command);
    } else if (command.startsWith("/affidabilita")) {
      console.log(`[PROCESSOR] User ${userId} requested reliability check: ${command}`);
      await handleReliabilityCommand(chatId, command, userId);
    } else if (command.startsWith("/lista_asset")) {
      console.log(`[PROCESSOR] User ${userId} requested asset list: ${command}`);
      await handleSymbolsCommand(chatId);
    } else if (command.startsWith("/config_rischio")) {
      console.log(`[PROCESSOR] User ${userId} requested risk config: ${command}`);
      await handleRiskConfigCommand(chatId, userId);
    } else if (command.startsWith("/imposta")) {
      console.log(`[PROCESSOR] User ${userId} requested settings: ${command}`);
      await handleSettingsCommand(chatId, userId);
    } else if (command.startsWith("/backtest")) {
      console.log(`[PROCESSOR] User ${userId} requested backtest: ${command}`);
      await handleBacktestCommand(chatId, command);
    } else if (command === "/start") {
      console.log(`[PROCESSOR] User ${userId} sent start command`);
      await handleStartCommand(chatId, userId);
    } else if (command === "/help" || command === "/aiuto") {
      console.log(`[PROCESSOR] User ${userId} requested help`);
      await handleHelpCommand(chatId);
    } else if (command === "/performance" || command === "/prestazioni") {
      console.log(`[PROCESSOR] User ${userId} requested performance stats`);
      await handlePerformanceCommand(chatId);
    } else if (command.startsWith("/symbols") || command.startsWith("/simboli")) {
      console.log(`[PROCESSOR] User ${userId} requested symbols list: ${command}`);
      await handleSymbolsCommand(chatId);
    } else if (command.startsWith("/strategies") || command.startsWith("/strategie")) {
      console.log(`[PROCESSOR] User ${userId} requested strategies info: ${command}`);
      await handleStrategiesCommand(chatId);
    } else if (command.startsWith("/vps")) {
      console.log(`[PROCESSOR] User ${userId} requested VPS command: ${command}`);
      // Check if user has VPS management access
      const hasAccess = await checkClientFeature(userId, "vps_management");
      
      if (!hasAccess) {
        console.log(`[PROCESSOR] User ${userId} lacks VPS access`);
        await sendMessage(chatId, getMessage('error.vps_access_denied', userLanguage));
        return;
      }
      
      await handleVPSCommand(chatId, userId, command);
    } else if (command === "/vps_setup") {
      console.log(`[PROCESSOR] User ${userId} requested VPS setup`);
      // Check if user has VPS management access
      const hasAccess = await checkClientFeature(userId, "vps_management");
      
      if (!hasAccess) {
        console.log(`[PROCESSOR] User ${userId} lacks VPS access for setup`);
        await sendMessage(chatId, getMessage('error.vps_access_denied', userLanguage));
        return;
      }
      
      await handleVPSSetup(chatId, userId);
    } else if (command === "/subscription" || command === "/features" || command === "/upgrade" || command === "/support") {
      console.log(`[PROCESSOR] User ${userId} requested client service: ${command}`);
      await handleClientCommands(chatId, userId, command);
    } else if (command === "/settings" || command === "/impostazioni") {
      console.log(`[PROCESSOR] User ${userId} requested settings (alternative): ${command}`);
      await handleSettingsCommand(chatId, userId);
    } else {
      console.log(`[PROCESSOR] User ${userId} sent unrecognized command: ${command}`);
      // Check if user is in VPS setup mode by checking if they have an active state
      const userState = await getUserState(userId);
      if (userState && userState.currentState !== USER_STATES.READY_TO_TRADE) {
        console.log(`[PROCESSOR] User ${userId} has active state ${userState.currentState}, redirecting to state handler`);
        await handleUserStateFlow(chatId, userId, text, userState);
      } else {
        console.log(`[PROCESSOR] Sending unknown command message to user ${userId}`);
        // Default help message for unrecognized commands
        await sendMessage(chatId, "‚ùì Comando non riconosciuto. Usa `/help` per vedere tutti i comandi disponibili.");
      }
    }
  } catch (error) {
    console.error("Error processing message:", error);
    await sendMessage(chatId, getMessage('error.general', userLanguage));
  }
}

export async function processCallbackQuery(chatId: number, userId: number, callbackData: string): Promise<void> {
  try {
    if (callbackData.startsWith("vps_")) {
      await handleVPSSetupCallback(chatId, userId, callbackData);
    }
    else if (callbackData.startsWith("mode_")) {
      const mode = callbackData.replace("mode_", "") as TradingStrategy;
      await handleTradingModeSelection(chatId, userId, mode);
    }
    else if (callbackData.startsWith("execute_")) {
      const parts = callbackData.split("_");
      const tradeId = parts[1];
      const lotSize = parseFloat(parts[2]);
      const strategy = parts[3] || TradingStrategy.INTRADAY;
      await executeTradeFromCallback(chatId, tradeId, lotSize, strategy);
    }
    else if (callbackData.startsWith("strategy_")) {
      const parts = callbackData.split("_");
      const strategy = parts[1] as TradingStrategy;
      const symbol = parts[2] || "BTCUSD";
      await handleStrategyCommand(chatId, `/segnale ${symbol}`, strategy, userId);
    }
    else if (callbackData === "new_analysis") {
      await sendMessage(chatId, "üìä Scegli la tua strategia di trading:\n\n‚ö° `/scalping SIMBOLO` - Trade veloci (1-15 min)\nüìà `/intraday SIMBOLO` - Day trading (1-6 ore)\n\nEsempio: `/scalping EURUSD`");
    }
    else if (callbackData === "show_performance") {
      await handlePerformanceCommand(chatId);
    }
    else if (callbackData.startsWith("predict_")) {
      const symbol = callbackData.replace("predict_", "");
      await handlePredictCommand(chatId, `/segnale ${symbol}`, userId);
    }
    else if (callbackData === "show_help") {
      await handleHelpCommand(chatId);
    }
    else if (callbackData === "show_strategies") {
      await handleStrategiesCommand(chatId);
    }
    else if (callbackData === "setup_trading_mode") {
      await startTradingModeSetup(chatId, userId);
    }
    else if (callbackData === "show_settings") {
      await handleSettingsCommand(chatId, userId);
    }
    else if (callbackData === "vps_setup") {
      await handleVPSSetup(chatId, userId);
    }
  }
  catch (error) {
    console.error("Error processing callback query:", error);
    await sendMessage(chatId, "‚ùå Errore nell'elaborazione della tua richiesta. Riprova.");
  }
}

async function executeTradeFromCallback(chatId: number, tradeId: string, lotSize: number, strategy: string): Promise<void> {
  try {
    const result = await execute({ tradeId, lotSize, strategy: strategy as TradingStrategy });
    const message = `
‚úÖ **Trade Eseguito con Successo!**

üÜî **Trade ID:** \`${tradeId}\`
üìä **Strategia:** ${strategy}
üíé **Dimensione Lotto:** ${lotSize}
üí∞ **Prezzo Esecuzione:** ${result.executionPrice || 'N/A'}
üÜî **Order ID:** ${result.orderId || 'N/A'}

‚è∞ **Ora Esecuzione:** ${new Date().toLocaleTimeString()}

**La tua posizione √® ora attiva su MT5!**
    `;
    await sendMessage(chatId, message);
  }
  catch (error) {
    console.error("Error executing trade:", error);
    await sendMessage(chatId, "‚ùå Errore nell'esecuzione del trade. Controlla la connessione MT5 e riprova.");
  }
}

async function handleUserStateFlow(chatId: number, userId: number, text: string, userState: any): Promise<void> {
  switch (userState.currentState) {
    case USER_STATES.SETTING_RISK_AMOUNT:
      await handleRiskAmountInput(chatId, userId, text, userState);
      break;
    case USER_STATES.SETTING_ACCOUNT_BALANCE:
      await handleAccountBalanceInput(chatId, userId, text, userState);
      break;
    default:
      await sendMessage(chatId, "‚ùå Stato sconosciuto. Ricomincia con /start");
      await clearUserState(userId);
      break;
  }
}

async function handleStartCommand(chatId: number, userId: number): Promise<void> {
  const userPrefs = await getUserPreferences(userId);
  if (userPrefs && userPrefs.tradingMode) {
    const modeInfo = getTradingModeInfo(userPrefs.tradingMode);
    const message = `
ü§ñ **Bentornato su AI Trading Bot Professionale**

Sei gi√† configurato con la modalit√† **${userPrefs.tradingMode}**!

${modeInfo}

üí∞ **Impostazioni Attuali:**
‚Ä¢ Rischio per trade: ${userPrefs.riskPercentage}%
‚Ä¢ Saldo account: ${userPrefs.accountBalance ? `$${userPrefs.accountBalance.toLocaleString()}` : 'Non impostato'}
‚Ä¢ Valuta account: ${userPrefs.accountCurrency}

üöÄ **Pronto per Tradare:**
‚Ä¢ Usa \`/segnale SIMBOLO\` per analisi con la tua modalit√† preferita
‚Ä¢ Usa \`/scalping SIMBOLO\` o \`/intraday SIMBOLO\` per strategie specifiche
‚Ä¢ Usa \`/impostazioni\` per cambiare le tue preferenze

üí° **Avvio Rapido:** Prova \`/${userPrefs.tradingMode.toLowerCase()} BTCUSD\` per un segnale!
    `;
    const keyboard = createInlineKeyboard([
      [
        { text: `${userPrefs.tradingMode === TradingStrategy.SCALPING ? '‚ö°' : 'üìà'} ${userPrefs.tradingMode} BTCUSD`, callback_data: `strategy_${userPrefs.tradingMode}_BTCUSD` }
      ],
      [
        { text: "‚öôÔ∏è Impostazioni", callback_data: "show_settings" },
        { text: "üìä Performance", callback_data: "show_performance" }
      ],
      [
        { text: "‚ùì Aiuto", callback_data: "show_help" },
        { text: "üñ•Ô∏è Setup VPS", callback_data: "vps_setup" }
      ]
    ]);
    await sendMessage(chatId, message, { replyMarkup: keyboard });
  }
  else {
    await startTradingModeSetup(chatId, userId);
  }
}

async function startTradingModeSetup(chatId: number, userId: number): Promise<void> {
  await setUserState(userId, chatId, USER_STATES.SELECTING_TRADING_MODE);
  const message = `
üéØ **Benvenuto su AI Trading Bot Professionale!**

Configuriamo le tue preferenze di trading per iniziare.

**Passo 1: Scegli la Tua Modalit√† di Trading**

${getAllTradingModesInfo()}

ü§î **Quale stile di trading ti si addice meglio?**

Seleziona una modalit√† qui sotto per vedere informazioni dettagliate e continuare la configurazione:
  `;
  const keyboard = createInlineKeyboard([
    [
      { text: "‚ö° Scalping", callback_data: "mode_SCALPING" },
      { text: "üìà Intraday", callback_data: "mode_INTRADAY" }
    ],
    [
      { text: "‚ùì Aiutami a Scegliere", callback_data: "show_strategies" }
    ]
  ]);
  await sendMessage(chatId, message, { replyMarkup: keyboard });
}

async function handleTradingModeSelection(chatId: number, userId: number, mode: TradingStrategy): Promise<void> {
  const userState = await getUserState(userId);
  if (!userState || userState.currentState !== USER_STATES.SELECTING_TRADING_MODE) {
    await sendMessage(chatId, "‚ùå Avvia il processo di configurazione con /start");
    return;
  }
  
  const modeInfo = getTradingModeInfo(mode);
  const message = `
‚úÖ **Modalit√† ${mode} Selezionata!**

${modeInfo}

**Passo 2: Configurazione Gestione Rischio**

Ora configuriamo le tue impostazioni di gestione del rischio.

üí∞ **Quanto vuoi rischiare per trade?**

Inserisci la percentuale di rischio (consigliato: 1-3%):
‚Ä¢ Conservativo: 1%
‚Ä¢ Bilanciato: 2% 
‚Ä¢ Aggressivo: 3%

Scrivi un numero come: \`2\` (per 2%)
  `;
  await setUserState(userId, chatId, USER_STATES.SETTING_RISK_AMOUNT, { selectedMode: mode });
  await sendMessage(chatId, message);
}

async function handleRiskAmountInput(chatId: number, userId: number, text: string, userState: any): Promise<void> {
  const riskInput = text.trim().replace('%', '');
  const riskPercentage = parseFloat(riskInput);
  if (isNaN(riskPercentage) || riskPercentage < 0.1 || riskPercentage > 10) {
    await sendMessage(chatId, "‚ùå Inserisci una percentuale di rischio valida tra 0.1% e 10%.\n\nEsempio: `2` (per 2%)");
    return;
  }
  const message = `
‚úÖ **Gestione Rischio Impostata: ${riskPercentage}%**

**Passo 3: Saldo Account (Opzionale)**

Per fornire raccomandazioni accurate sul dimensionamento delle posizioni, inserisci il saldo del tuo account.

üí∞ **Qual √® il saldo del tuo account?**

Esempi:
‚Ä¢ \`1000\` (per $1.000)
‚Ä¢ \`5000\` (per $5.000)
‚Ä¢ \`skip\` (per impostarlo dopo)

Questo aiuta a calcolare le dimensioni ottimali dei lotti per i tuoi trade.
  `;
  await setUserState(userId, chatId, USER_STATES.SETTING_ACCOUNT_BALANCE, {
    ...userState.stateData,
    riskPercentage
  });
  await sendMessage(chatId, message);
}

async function handleAccountBalanceInput(chatId: number, userId: number, text: string, userState: any): Promise<void> {
  const input = text.toLowerCase().trim();
  let accountBalance;
  if (input !== 'skip') {
    const balanceInput = parseFloat(input);
    if (isNaN(balanceInput) || balanceInput < 100) {
      await sendMessage(chatId, "‚ùå Inserisci un saldo account valido (minimo $100) o scrivi `skip`.\n\nEsempio: `1000` (per $1.000)");
      return;
    }
    accountBalance = balanceInput;
  }
  
  const preferences: UserPreferences = {
    userId,
    chatId,
    tradingMode: userState.stateData.selectedMode,
    riskPercentage: userState.stateData.riskPercentage,
    accountBalance,
    accountCurrency: 'USD'
  };
  await setUserPreferences(preferences);
  await setUserState(userId, chatId, USER_STATES.READY_TO_TRADE);
  
  const modeInfo = getTradingModeInfo(preferences.tradingMode!);
  const message = `
üéâ **Configurazione Completata!**

Le tue preferenze di trading sono state salvate:

${modeInfo}

üí∞ **Le Tue Impostazioni:**
‚Ä¢ Rischio per trade: ${preferences.riskPercentage}%
‚Ä¢ Saldo account: ${accountBalance ? `$${accountBalance.toLocaleString()}` : 'Non impostato (pu√≤ essere impostato dopo)'}
‚Ä¢ Valuta account: ${preferences.accountCurrency}

üöÄ **Sei pronto per tradare!**

Prova questi comandi:
‚Ä¢ \`/segnale BTCUSD\` - Ottieni un segnale usando la tua modalit√† preferita
‚Ä¢ \`/${preferences.tradingMode!.toLowerCase()} EURUSD\` - Ottieni un segnale di strategia specifica
‚Ä¢ \`/impostazioni\` - Cambia le tue preferenze in qualsiasi momento

**Iniziamo con il tuo primo segnale!** üéØ
  `;
  const keyboard = createInlineKeyboard([
    [
      { text: `${preferences.tradingMode === TradingStrategy.SCALPING ? '‚ö°' : 'üìà'} Ottieni Segnale ${preferences.tradingMode}`, callback_data: `strategy_${preferences.tradingMode}_BTCUSD` }
    ],
    [
      { text: "üìä Vedi Tutte le Strategie", callback_data: "show_strategies" },
      { text: "‚öôÔ∏è Impostazioni", callback_data: "show_settings" }
    ],
    [
      { text: "üñ•Ô∏è Setup VPS", callback_data: "vps_setup" },
      { text: "‚ùì Aiuto", callback_data: "show_help" }
    ]
  ]);
  await sendMessage(chatId, message, { replyMarkup: keyboard });
}

async function handleSettingsCommand(chatId: number, userId: number): Promise<void> {
  const userPrefs = await getUserPreferences(userId);
  if (!userPrefs) {
    await sendMessage(chatId, "‚ùå Nessuna preferenza trovata. Usa /start per configurare la tua modalit√† di trading.");
    return;
  }
  const modeInfo = getTradingModeInfo(userPrefs.tradingMode!);
  const message = `
‚öôÔ∏è **Le Tue Impostazioni di Trading**

${modeInfo}

üí∞ **Impostazioni Attuali:**
‚Ä¢ Rischio per trade: ${userPrefs.riskPercentage}%
‚Ä¢ Saldo account: ${userPrefs.accountBalance ? `$${userPrefs.accountBalance.toLocaleString()}` : 'Non impostato'}
‚Ä¢ Valuta account: ${userPrefs.accountCurrency}

üîß **Cambia Impostazioni:**
Usa \`/start\` per riconfigurare la tua modalit√† di trading e impostazioni di rischio.

üìä **Comandi Disponibili:**
‚Ä¢ \`/segnale SIMBOLO\` - Usa la tua modalit√† preferita (${userPrefs.tradingMode})
‚Ä¢ \`/scalping SIMBOLO\` - Forza modalit√† scalping
‚Ä¢ \`/intraday SIMBOLO\` - Forza modalit√† intraday  
‚Ä¢ \`/performance\` - Vedi le tue statistiche di trading
  `;
  const keyboard = createInlineKeyboard([
    [
      { text: "üîÑ Riconfigura", callback_data: "setup_trading_mode" },
      { text: "üìä Performance", callback_data: "show_performance" }
    ],
    [
      { text: "‚ùì Aiuto", callback_data: "show_help" },
      { text: "üñ•Ô∏è Setup VPS", callback_data: "vps_setup" }
    ]
  ]);
  await sendMessage(chatId, message, { replyMarkup: keyboard });
}

async function handlePredictCommand(chatId: number, command: string, userId?: number): Promise<void> {
  const parts = command.split(" ");
  const symbol = parts[1]?.toUpperCase() || "BTCUSD";
  try {
    const userPrefs = userId ? await getUserPreferences(userId) : null;
    const strategy = userPrefs?.tradingMode;
    const strategyText = strategy ? ` usando la tua modalit√† preferita ${strategy}` : "";
    await sendMessage(chatId, `üß† **Analisi AI Avanzata per ${symbol}**${strategyText}\n\nüîç Analizzando confluenza multi-timeframe, indicatori tecnici avanzati, VWAP, sentiment e condizioni di mercato...\n\n‚è≥ Questo pu√≤ richiedere 10-15 secondi per un'analisi completa.`);
    const prediction = await predict({
      symbol,
      strategy
    });
    await sendTradingSignal(chatId, prediction, userPrefs);
  }
  catch (error) {
    console.error("Prediction error:", error);
    await sendMessage(chatId, "‚ùå Errore nella generazione della previsione. Riprova o controlla se il simbolo √® valido.");
  }
}

async function handleStrategyCommand(chatId: number, command: string, strategy: TradingStrategy, userId?: number): Promise<void> {
  const parts = command.split(" ");
  const symbol = parts[1]?.toUpperCase() || "BTCUSD";
  try {
    const userPrefs = userId ? await getUserPreferences(userId) : null;
    const strategyEmojis = {
      [TradingStrategy.SCALPING]: "‚ö°",
      [TradingStrategy.INTRADAY]: "üìà"
    };
    await sendMessage(chatId, `${strategyEmojis[strategy]} **Analisi ${strategy} per ${symbol}**\n\nüîç Analizzando confluenza multi-timeframe, indicatori tecnici avanzati, VWAP e condizioni di mercato per opportunit√† ${strategy.toLowerCase()}...\n\n‚è≥ Ottimizzando livelli di entrata, stop loss e take profit...`);
    const prediction = await predict({
      symbol,
      strategy: strategy
    });
    await sendTradingSignal(chatId, prediction, userPrefs);
  }
  catch (error) {
    console.error("Strategy prediction error:", error);
    await sendMessage(chatId, `‚ùå Errore nella generazione dell'analisi ${strategy.toLowerCase()}. Riprova.`);
  }
}

async function sendTradingSignal(chatId: number, prediction: any, userPrefs?: UserPreferences | null): Promise<void> {
  const strategyEmojis: Record<string, string> = {
    [TradingStrategy.SCALPING]: "‚ö°",
    [TradingStrategy.INTRADAY]: "üìà"
  };

  const confidenceEmoji = prediction.confidence >= 85 ? "üî•" : prediction.confidence >= 75 ? "‚ö°" : "‚ö†Ô∏è";
  const strategyEmoji = strategyEmojis[prediction.strategy] || "üìä";
  
  let positionSizeInfo = "";
  if (userPrefs && userPrefs.accountBalance && userPrefs.riskPercentage) {
    const riskAmount = userPrefs.accountBalance * (userPrefs.riskPercentage / 100);
    const stopLossDistance = Math.abs(prediction.entryPrice - prediction.stopLoss);
    const suggestedLotSize = Math.min(riskAmount / stopLossDistance, 2.0);
    
    positionSizeInfo = `

üéØ **Il Tuo Dimensionamento Posizione:**
‚Ä¢ Saldo Account: $${userPrefs.accountBalance.toLocaleString()}
‚Ä¢ Importo Rischio: $${riskAmount.toFixed(2)} (${userPrefs.riskPercentage}%)
‚Ä¢ Dimensione Lotto Suggerita: ${Math.round(suggestedLotSize * 100) / 100} lotti`;
  }
  
  const message = `
${strategyEmoji} **Segnale ${prediction.strategy} - ${prediction.symbol}**

üÜî **Trade ID:** \`${prediction.tradeId}\`
üìà **Direzione:** **${prediction.direction}**
üí∞ **Prezzo Entrata:** ${prediction.entryPrice}
üéØ **Take Profit:** ${prediction.takeProfit}
üõ°Ô∏è **Stop Loss:** ${prediction.stopLoss}
${confidenceEmoji} **Confidenza:** **${prediction.confidence}%**
üìä **Rischio/Rendimento:** 1:${prediction.riskRewardRatio}
üíé **Dimensione Consigliata:** ${prediction.recommendedLotSize} lotti
‚è±Ô∏è **Tempo Max Mantenimento:** ${prediction.maxHoldingTime}h
‚è∞ **Scadenza:** ${new Date(prediction.expiresAt).toLocaleString()}${positionSizeInfo}

üìä **Analisi Strategia:**
${prediction.strategyRecommendation}

üß† **Analisi Tecnica AI Avanzata:**
‚Ä¢ **Trend Multi-TF:** ${prediction.analysis?.technical?.trend || 'N/A'}
‚Ä¢ **Confluenza:** ${prediction.analysis?.enhancedTechnical?.multiTimeframeAnalysis?.confluence || 'N/A'}%
‚Ä¢ **Supporto:** ${prediction.analysis?.technical?.support || 'N/A'}
‚Ä¢ **Resistenza:** ${prediction.analysis?.technical?.resistance || 'N/A'}
‚Ä¢ **Smart Money:** ${prediction.analysis?.smartMoney?.institutionalFlow || 'N/A'}
‚Ä¢ **VWAP Trend:** ${prediction.analysis?.vwap?.analysis?.trend || 'N/A'}
‚Ä¢ **Sentiment:** ${prediction.analysis?.sentiment?.score || 'N/A'}

üí° **Gestione Rischio:**
Usa sempre lo stop loss e non rischiare mai pi√π del 2% del tuo account per trade.
  `;
  
  const suggestedSize = userPrefs && userPrefs.accountBalance ?
    Math.min(userPrefs.accountBalance * (userPrefs.riskPercentage || 2) / 100 / Math.abs(prediction.entryPrice - prediction.stopLoss), 2.0) :
    prediction.recommendedLotSize;
  const keyboard = createInlineKeyboard([
    [
      { text: `${strategyEmoji} Esegui ${Math.round(suggestedSize * 100) / 100}`, callback_data: `execute_${prediction.tradeId}_${Math.round(suggestedSize * 100) / 100}_${prediction.strategy}` },
      { text: `${strategyEmoji} Esegui 0.01`, callback_data: `execute_${prediction.tradeId}_0.01_${prediction.strategy}` }
    ],
    [
      { text: "üìä Nuova Analisi", callback_data: "new_analysis" },
      { text: "üìà Performance", callback_data: "show_performance" }
    ]
  ]);
  await sendMessage(chatId, message, { replyMarkup: keyboard });
}

async function handleExecuteCommand(chatId: number, command: string): Promise<void> {
  const parts = command.split(" ");
  if (parts.length < 3) {
    await sendMessage(chatId, "‚ùå Uso: `/ordina TRADE_ID DIMENSIONE_LOTTO`\n\nEsempio: `/ordina BTC-001 0.1`");
    return;
  }
  const tradeId = parts[1];
  const lotSize = parseFloat(parts[2]);
  const strategy = parts[3] || TradingStrategy.INTRADAY;
  if (isNaN(lotSize) || lotSize <= 0) {
    await sendMessage(chatId, "‚ùå Dimensione lotto non valida. Usa un numero positivo.\n\nEsempio: `/ordina BTC-001 0.1`");
    return;
  }
  await executeTradeFromCallback(chatId, tradeId, lotSize, strategy);
}

async function handleStatusCommand(chatId: number, userId: number): Promise<void> {
  try {
    const positions = await getMT5Positions();
    
    if (positions.length === 0) {
      const message = `
üìä **Stato Posizioni MT5**

‚úÖ **Nessuna posizione aperta**

üí∞ **Info Account:**
‚Ä¢ Saldo: $10.000,00
‚Ä¢ Margine Libero: $9.500,00
‚Ä¢ Posizioni Aperte: 0
‚Ä¢ Livello Rischio: Conservativo

üéØ **Pronto per nuovi trade!**
Usa \`/segnale SIMBOLO\` per ottenere un nuovo segnale.
      `;
      await sendMessage(chatId, message);
      return;
    }

    let positionsText = "üìä **Posizioni Aperte su MT5:**\n\n";
    let totalProfit = 0;

    positions.forEach((pos, index) => {
      const direction = pos.type === 0 ? "LONG" : "SHORT";
      const directionEmoji = pos.type === 0 ? "üìà" : "üìâ";
      const profitEmoji = pos.profit >= 0 ? "üíö" : "‚ùå";
      
      positionsText += `${directionEmoji} **${pos.symbol}** (${direction})\n`;
      positionsText += `‚Ä¢ Ticket: \`${pos.ticket}\`\n`;
      positionsText += `‚Ä¢ Volume: ${pos.volume} lotti\n`;
      positionsText += `‚Ä¢ Prezzo Apertura: ${pos.openPrice}\n`;
      positionsText += `‚Ä¢ Prezzo Attuale: ${pos.currentPrice}\n`;
      positionsText += `‚Ä¢ ${profitEmoji} P&L: $${pos.profit.toFixed(2)}\n`;
      if (pos.comment) positionsText += `‚Ä¢ Commento: ${pos.comment}\n`;
      positionsText += "\n";
      
      totalProfit += pos.profit;
    });

    const totalEmoji = totalProfit >= 0 ? "üíö" : "‚ùå";
    positionsText += `${totalEmoji} **P&L Totale: $${totalProfit.toFixed(2)}**\n\n`;
    positionsText += "üí° Usa `/chiudi TICKET_ID` per chiudere una posizione specifica.";

    await sendMessage(chatId, positionsText);
  } catch (error) {
    console.error("Error getting positions:", error);
    await sendMessage(chatId, "‚ùå Errore nel recupero delle posizioni. Controlla la connessione MT5.");
  }
}

async function handleCloseCommand(chatId: number, command: string): Promise<void> {
  const parts = command.split(" ");
  if (parts.length < 2) {
    await sendMessage(chatId, "‚ùå Uso: `/chiudi TICKET_ID`\n\nEsempio: `/chiudi 123456789`");
    return;
  }
  
  const ticketId = parseInt(parts[1]);
  if (isNaN(ticketId)) {
    await sendMessage(chatId, "‚ùå ID ticket non valido. Deve essere un numero.\n\nEsempio: `/chiudi 123456789`");
    return;
  }

  try {
    await sendMessage(chatId, `üîÑ Chiudendo posizione ${ticketId}...`);
    
    const result = await closeMT5Position(ticketId);
    
    if (result.success) {
      const message = `
‚úÖ **Posizione Chiusa con Successo!**

üÜî **Ticket:** ${ticketId}
üí∞ **Prezzo Chiusura:** ${result.executionPrice || 'N/A'}
üÜî **Deal ID:** ${result.orderId || 'N/A'}
‚è∞ **Ora Chiusura:** ${new Date().toLocaleTimeString()}

**La posizione √® stata chiusa su MT5!**
      `;
      await sendMessage(chatId, message);
    } else {
      await sendMessage(chatId, `‚ùå Errore nella chiusura della posizione: ${result.error}`);
    }
  } catch (error) {
    console.error("Error closing position:", error);
    await sendMessage(chatId, "‚ùå Errore nella chiusura della posizione. Controlla la connessione MT5 e riprova.");
  }
}

async function handleReliabilityCommand(chatId: number, command: string, userId?: number): Promise<void> {
  const parts = command.split(" ");
  const symbol = parts[1]?.toUpperCase() || "BTCUSD";
  
  try {
    await sendMessage(chatId, `üîç **Analizzando affidabilit√† per ${symbol}**...\n\n‚è≥ Calcolo in corso...`);
    
    const prediction = await predict({ symbol });
    
    const confidenceEmoji = prediction.confidence >= 85 ? "üî•" : prediction.confidence >= 75 ? "‚ö°" : "‚ö†Ô∏è";
    const gradeEmoji = prediction.confidence >= 90 ? "üèÜ" : prediction.confidence >= 80 ? "ü•á" : prediction.confidence >= 70 ? "ü•à" : "ü•â";
    
    const message = `
${confidenceEmoji} **Affidabilit√† ${symbol}**

${gradeEmoji} **Punteggio:** ${prediction.confidence}%
üìä **Strategia Ottimale:** ${prediction.strategy}
üìà **Direzione:** ${prediction.direction}

**Fattori Determinanti:**
‚Ä¢ Confluenza Multi-Timeframe: ${prediction.analysis?.technical?.breakoutProbability || 'N/A'}%
‚Ä¢ Analisi Smart Money: ${prediction.analysis?.smartMoney?.institutionalFlow || 'N/A'}
‚Ä¢ VWAP Trend: ${prediction.analysis?.technical?.trend || 'N/A'}
‚Ä¢ Sentiment di Mercato: ${prediction.analysis?.sentiment?.score || 'N/A'}
‚Ä¢ Volatilit√†: ${prediction.analysis?.technical?.atr || 'N/A'}

${prediction.confidence >= 70 ? 
  "‚úÖ **Raccomandazione:** Segnale affidabile per il trading" : 
  "‚ö†Ô∏è **Raccomandazione:** Affidabilit√† bassa, considera asset alternativi"}

üí° Usa \`/segnale ${symbol}\` per l'analisi completa.
    `;
    
    await sendMessage(chatId, message);
  } catch (error) {
    console.error("Reliability analysis error:", error);
    await sendMessage(chatId, "‚ùå Errore nell'analisi di affidabilit√†. Riprova.");
  }
}

async function handleRiskConfigCommand(chatId: number, userId: number): Promise<void> {
  const message = `
‚öôÔ∏è **Configurazione Gestione Rischio**

Questa funzionalit√† ti permetter√† di configurare:

‚Ä¢ Percentuale massima di rischio per trade
‚Ä¢ Limite di rischio giornaliero
‚Ä¢ Numero massimo di trade simultanei
‚Ä¢ Modalit√† stop loss di default (ATR/PIPS)
‚Ä¢ Modalit√† take profit di default (RR/PIPS)

üöß **In Sviluppo**
Questa funzionalit√† sar√† disponibile presto!

Per ora, usa \`/start\` per configurare le impostazioni di base.
  `;
  
  await sendMessage(chatId, message);
}

async function handleBacktestCommand(chatId: number, command: string): Promise<void> {
  const parts = command.split(" ");
  const symbol = parts[1]?.toUpperCase() || "BTCUSD";
  const timeframe = parts[2] || "1h";
  const period = parts[3] || "30d";
  
  const message = `
üìä **Backtest Rapido**

üöß **Funzionalit√† in Sviluppo**

Parametri richiesti:
‚Ä¢ Simbolo: ${symbol}
‚Ä¢ Timeframe: ${timeframe}
‚Ä¢ Periodo: ${period}

Questa funzionalit√† eseguir√† un backtest rapido della strategia AI e mostrer√†:
‚Ä¢ Win Rate
‚Ä¢ Expectancy
‚Ä¢ Maximum Drawdown
‚Ä¢ Sample Size
‚Ä¢ Profit Factor

Sar√† disponibile presto!
  `;
  
  await sendMessage(chatId, message);
}

async function handleHelpCommand(chatId: number): Promise<void> {
  const message = `
ü§ñ **AI Trading Bot Professionale - Aiuto**

**üéØ Comandi di Trading:**
‚Ä¢ \`/segnale SIMBOLO\` - Analisi AI con strategia ottimale
‚Ä¢ \`/scalping SIMBOLO\` - Trade veloci (1-15 min)
‚Ä¢ \`/intraday SIMBOLO\` - Day trading (1-6 ore)
‚Ä¢ \`/ordina TRADE_ID DIMENSIONE_LOTTO\` - Esegui trade su MT5

**üìä Gestione Posizioni:**
‚Ä¢ \`/stato\` - Mostra posizioni aperte su MT5
‚Ä¢ \`/chiudi TICKET_ID\` - Chiudi posizione specifica
‚Ä¢ \`/affidabilita SIMBOLO\` - Solo punteggio affidabilit√†

**üñ•Ô∏è Gestione VPS:**
‚Ä¢ \`/vps\` - Dashboard e stato VPS
‚Ä¢ \`/vps_setup\` - Configura VPS automaticamente

**üí∞ Account e Abbonamento:**
‚Ä¢ \`/subscription\` - Dettagli del tuo abbonamento
‚Ä¢ \`/features\` - Vedi le tue funzionalit√† disponibili
‚Ä¢ \`/upgrade\` - Aggiorna il tuo piano
‚Ä¢ \`/support\` - Ottieni aiuto e supporto

**üìä Comandi Informativi:**
‚Ä¢ \`/performance\` - Statistiche di trading
‚Ä¢ \`/impostazioni\` - Le tue preferenze di trading
‚Ä¢ \`/strategie\` - Impara le strategie
‚Ä¢ \`/lista_asset\` - Simboli supportati per il trading

**‚öôÔ∏è Configurazione:**
‚Ä¢ \`/config_rischio\` - Configura gestione rischio
‚Ä¢ \`/imposta\` - Parametri di default
‚Ä¢ \`/backtest SIMBOLO\` - Backtest rapido (presto)

**üí° Suggerimenti Pro:**
‚Ä¢ Inizia con \`/vps_setup\` per configurazione automatica
‚Ä¢ Usa la tua modalit√† di trading preferita da \`/impostazioni\`
‚Ä¢ Segui sempre le linee guida di gestione del rischio

**‚ö†Ô∏è Avviso di Rischio:**
Questo bot usa analisi AI avanzata. Usa sempre una gestione del rischio appropriata e non tradare mai denaro che non puoi permetterti di perdere.

Hai bisogno di pi√π aiuto? Controlla \`/subscription\` per i dettagli del tuo piano! üí¨
  `;
  await sendMessage(chatId, message);
}

async function handlePerformanceCommand(chatId: number): Promise<void> {
  try {
    const performance = await getPerformance();
    const message = `
üìä **Dashboard Performance Trading**

**üéØ Statistiche Generali:**
‚Ä¢ Trade Totali: ${performance.totalTrades}
‚Ä¢ Tasso Vittoria: ${performance.winRate.toFixed(1)}%
‚Ä¢ Profitto Medio: $${performance.avgProfit.toFixed(2)}
‚Ä¢ Perdita Media: $${performance.avgLoss.toFixed(2)}

**üìà Migliore Performance:**
‚Ä¢ Miglior Trade: $${performance.bestTrade.toFixed(2)}
‚Ä¢ Fattore Profitto: ${performance.profitFactor.toFixed(2)}
‚Ä¢ Confidenza Media: ${performance.avgConfidence.toFixed(1)}%

**‚ö†Ô∏è Metriche Rischio:**
‚Ä¢ Peggior Trade: $${performance.worstTrade.toFixed(2)}

**üí° Continua cos√¨!**
Le performance di trading sembrano solide. Ricorda di seguire sempre i principi di gestione del rischio appropriati.

üìà **Prossimi Passi:**
‚Ä¢ Continua a seguire il tuo piano di trading
‚Ä¢ Usa \`/segnale SIMBOLO\` per nuovi segnali
‚Ä¢ Controlla \`/stato\` per la salute del sistema
    `;
    await sendMessage(chatId, message);
  }
  catch (error) {
    console.error("Error getting performance:", error);
    await sendMessage(chatId, "‚ùå Errore nel recupero dei dati di performance. Riprova.");
  }
}

async function handleSymbolsCommand(chatId: number): Promise<void> {
  const message = `
üìä **Simboli di Trading Supportati**

**üí∞ Coppie Forex Principali:**
‚Ä¢ **EURUSD** - Euro/Dollaro USA ‚ö°üìà
‚Ä¢ **GBPUSD** - Sterlina/Dollaro USA ‚ö°üìà
‚Ä¢ **USDJPY** - Dollaro USA/Yen Giapponese ‚ö°üìà
‚Ä¢ **AUDUSD** - Dollaro Australiano/Dollaro USA üìà
‚Ä¢ **USDCAD** - Dollaro USA/Dollaro Canadese üìà
‚Ä¢ **USDCHF** - Dollaro USA/Franco Svizzero üìà
‚Ä¢ **NZDUSD** - Dollaro Neozelandese/Dollaro USA üìà

**üíé Criptovalute:**
‚Ä¢ **BTCUSD** - Bitcoin ‚ö°üìà
‚Ä¢ **ETHUSD** - Ethereum ‚ö°üìà

**üèÜ Metalli Preziosi:**
‚Ä¢ **XAUUSD** - Oro üìà

**üõ¢Ô∏è Materie Prime:**
‚Ä¢ **CRUDE** - Petrolio WTI üìà
‚Ä¢ **BRENT** - Petrolio Brent üìà

**üéØ Simboli per Strategia:**
‚ö° = Eccellente per SCALPING (1-15 min)
üìà = Eccellente per INTRADAY (1-6 ore)  

**Esempi di Uso:**
‚Ä¢ \`/scalping BTCUSD\` - Scalping Bitcoin
‚Ä¢ \`/intraday EURUSD\` - Intraday Euro
  `;
  await sendMessage(chatId, message);
}

async function handleStrategiesCommand(chatId: number): Promise<void> {
  const message = `
üìä **Guida alle Strategie di Trading**

${getAllTradingModesInfo()}

**üéØ Come Scegliere:**

**Scegli SCALPING se:**
‚Ä¢ Puoi monitorare i trade attivamente
‚Ä¢ Preferisci profitti veloci
‚Ä¢ Hai una connessione internet stabile
‚Ä¢ Ti piace il trading ad alta frequenza

**Scegli INTRADAY se:**
‚Ä¢ Fai trading part-time
‚Ä¢ Vuoi rischio/rendimento bilanciato
‚Ä¢ Puoi controllare i trade 2-3 volte al giorno
‚Ä¢ Preferisci opportunit√† a medio termine

**üí° Suggerimenti Pro:**
‚Ä¢ Usa \`/impostazioni\` per impostare la tua modalit√† preferita
‚Ä¢ Inizia con INTRADAY per un approccio bilanciato
‚Ä¢ Combina strategie per diversificazione
‚Ä¢ Segui sempre le regole di gestione del rischio

Pronto per iniziare? Usa \`/segnale SIMBOLO\` per l'analisi!
  `;
  await sendMessage(chatId, message);
}
