import { sendMessage, sendPhoto, createInlineKeyboard } from "./telegram-client";
import { analysis } from "~encore/clients";
import { handleVPSCommand, handleVPSSetup, handleVPSSetupCallback } from "./vps-manager";

export async function processMessage(chatId: number, userId: number, text: string): Promise<void> {
  const command = text.toLowerCase().trim();

  try {
    if (command.startsWith("/predict")) {
      await handlePredictCommand(chatId, command);
    } else if (command.startsWith("/scalping")) {
      await handleStrategyCommand(chatId, command, "SCALPING");
    } else if (command.startsWith("/intraday")) {
      await handleStrategyCommand(chatId, command, "INTRADAY");
    } else if (command.startsWith("/swing")) {
      await handleStrategyCommand(chatId, command, "SWING");
    } else if (command.startsWith("/execute")) {
      await handleExecuteCommand(chatId, command);
    } else if (command === "/start") {
      await handleStartCommand(chatId);
    } else if (command === "/help") {
      await handleHelpCommand(chatId);
    } else if (command === "/status") {
      await handleStatusCommand(chatId);
    } else if (command === "/performance") {
      await handlePerformanceCommand(chatId);
    } else if (command.startsWith("/symbols")) {
      await handleSymbolsCommand(chatId);
    } else if (command.startsWith("/strategies")) {
      await handleStrategiesCommand(chatId);
    } else if (command.startsWith("/vps")) {
      await handleVPSCommand(chatId, userId, command);
    } else if (command === "/vps_setup") {
      await handleVPSSetup(chatId, userId);
    } else {
      // Check if user is in VPS setup mode
      await handleVPSSetup(chatId, userId, text);
    }
  } catch (error) {
    console.error("Error processing message:", error);
    await sendMessage(chatId, "‚ùå Si √® verificato un errore durante l'elaborazione della tua richiesta. Riprova.");
  }
}

export async function processCallbackQuery(chatId: number, userId: number, callbackData: string): Promise<void> {
  try {
    if (callbackData.startsWith("vps_")) {
      await handleVPSSetupCallback(chatId, userId, callbackData);
    } else if (callbackData.startsWith("execute_")) {
      const parts = callbackData.split("_");
      const tradeId = parts[1];
      const lotSize = parseFloat(parts[2]);
      const strategy = parts[3] || "INTRADAY";
      await executeTradeFromCallback(chatId, tradeId, lotSize, strategy);
    } else if (callbackData.startsWith("strategy_")) {
      const parts = callbackData.split("_");
      const strategy = parts[1] as "SCALPING" | "INTRADAY" | "SWING";
      const symbol = parts[2] || "BTCUSD";
      await handleStrategyCommand(chatId, `/predict ${symbol}`, strategy);
    } else if (callbackData === "new_analysis") {
      await sendMessage(chatId, "üìä Scegli la tua strategia di trading:\n\n‚ö° `/scalping SIMBOLO` - Trade veloci (1-15 min)\nüìà `/intraday SIMBOLO` - Day trading (1-8 ore)\nüéØ `/swing SIMBOLO` - Trade multi-giorno (1-7 giorni)\n\nEsempio: `/scalping EURUSD`");
    } else if (callbackData === "show_performance") {
      await handlePerformanceCommand(chatId);
    } else if (callbackData.startsWith("predict_")) {
      const symbol = callbackData.replace("predict_", "");
      await handlePredictCommand(chatId, `/predict ${symbol}`);
    } else if (callbackData === "show_help") {
      await handleHelpCommand(chatId);
    } else if (callbackData === "show_strategies") {
      await handleStrategiesCommand(chatId);
    }
  } catch (error) {
    console.error("Error processing callback query:", error);
    await sendMessage(chatId, "‚ùå Si √® verificato un errore durante l'elaborazione della tua richiesta. Riprova.");
  }
}

async function executeTradeFromCallback(chatId: number, tradeId: string, lotSize: number, strategy: string): Promise<void> {
  try {
    await sendMessage(chatId, `‚ö° Esecuzione trade ${strategy} ${tradeId} con ${lotSize} lotti...`);
    
    const result = await analysis.execute({ tradeId, lotSize, strategy });
    
    if (result.success) {
      const message = `
‚úÖ **Trade ${strategy} Eseguito con Successo**

üÜî ID Trade: \`${tradeId}\`
üìã Ordine MT5: #${result.orderId}
üí∞ Dimensione Lotto: ${lotSize}
üíµ Prezzo di Ingresso: ${result.executionPrice}
‚è±Ô∏è Durata Stimata: ${result.estimatedHoldingTime}

üéØ Il tuo trade ${strategy.toLowerCase()} √® ora attivo su MT5!
      `;
      await sendMessage(chatId, message);
    } else {
      await sendMessage(chatId, `‚ùå **Esecuzione trade fallita**\n\nüö´ Errore: ${result.error}\n\nControlla la tua connessione MT5 e riprova.`);
    }
  } catch (error) {
    console.error("Execution error:", error);
    await sendMessage(chatId, "‚ùå Errore nell'esecuzione del trade. Controlla la tua connessione MT5 e riprova.");
  }
}

async function handlePredictCommand(chatId: number, command: string): Promise<void> {
  const parts = command.split(" ");
  const symbol = parts[1]?.toUpperCase() || "BTCUSD";

  try {
    await sendMessage(chatId, `üß† **Analisi ML Avanzata per ${symbol}**\n\nüîç Analizzando struttura di mercato, flusso smart money e determinando strategia ottimale...\n\n‚è≥ Potrebbero volerci 10-15 secondi per un'analisi completa.`);
    
    const prediction = await analysis.predict({ symbol });
    
    await sendTradingSignal(chatId, prediction);
  } catch (error) {
    console.error("Prediction error:", error);
    await sendMessage(chatId, "‚ùå Errore nella generazione della previsione. Riprova o controlla se il simbolo √® valido.");
  }
}

async function handleStrategyCommand(chatId: number, command: string, strategy: "SCALPING" | "INTRADAY" | "SWING"): Promise<void> {
  const parts = command.split(" ");
  const symbol = parts[1]?.toUpperCase() || "BTCUSD";

  try {
    const strategyEmojis = {
      "SCALPING": "‚ö°",
      "INTRADAY": "üìà", 
      "SWING": "üéØ"
    };

    await sendMessage(chatId, `${strategyEmojis[strategy]} **Analisi ${strategy} per ${symbol}**\n\nüîç Analizzando il mercato per opportunit√† ${strategy.toLowerCase()}...\n\n‚è≥ Ottimizzando livelli di ingresso, stop loss e take profit...`);
    
    const prediction = await analysis.predict({ symbol, strategy });
    
    await sendTradingSignal(chatId, prediction);
  } catch (error) {
    console.error("Strategy prediction error:", error);
    await sendMessage(chatId, `‚ùå Errore nella generazione dell'analisi ${strategy.toLowerCase()}. Riprova.`);
  }
}

async function sendTradingSignal(chatId: number, prediction: any): Promise<void> {
  const strategyEmojis = {
    "SCALPING": "‚ö°",
    "INTRADAY": "üìà",
    "SWING": "üéØ"
  };

  const directionEmoji = prediction.direction === "LONG" ? "üìà" : "üìâ";
  const confidenceEmoji = prediction.confidence >= 85 ? "üî•" : prediction.confidence >= 75 ? "‚ö°" : "‚ö†Ô∏è";
  const strategyEmoji = strategyEmojis[prediction.strategy] || "üìä";
  
  const message = `
${strategyEmoji} **Segnale ${prediction.strategy} - ${prediction.symbol}**

üÜî ID Trade: \`${prediction.tradeId}\`
${directionEmoji} **Direzione: ${prediction.direction}**
üí∞ **Prezzo di Ingresso:** \`${prediction.entryPrice}\`
üéØ **Take Profit:** \`${prediction.takeProfit}\`
üõ°Ô∏è **Stop Loss:** \`${prediction.stopLoss}\`
${confidenceEmoji} **Confidenza:** **${prediction.confidence}%**
üìä **Rischio/Rendimento:** 1:${prediction.riskRewardRatio}
üíé **Dimensione Consigliata:** ${prediction.recommendedLotSize} lotti
‚è±Ô∏è **Durata Max:** ${prediction.maxHoldingTime}h

üìä **Analisi Strategia:**
${prediction.strategyRecommendation}

üìà **Analisi Price Action:**
‚Ä¢ Struttura di Mercato: **${prediction.analysis.technical.structure}**
‚Ä¢ Trend: **${prediction.analysis.technical.trend}**
‚Ä¢ Probabilit√† Breakout: **${prediction.analysis.technical.breakoutProbability}%**

üë• **Consenso Trader Professionali:**
‚Ä¢ Top Trader: ${prediction.analysis.professional.topTraders.slice(0, 2).join(", ")}
‚Ä¢ Consenso: **${prediction.analysis.professional.consensusView}**
‚Ä¢ Rischio/Rendimento: **1:${prediction.analysis.professional.riskReward.toFixed(1)}**

üéØ **Zone di Liquidit√† Chiave:**
${prediction.analysis.smartMoney.liquidityZones.slice(0, 3).map(zone => `‚Ä¢ ${zone.toFixed(5)}`).join('\n')}

üì∞ **Sentiment di Mercato:** ${getSentimentEmoji(prediction.analysis.sentiment.score)} ${(prediction.analysis.sentiment.score * 100).toFixed(0)}%

‚ö° **Esecuzione Rapida:**
\`/execute ${prediction.tradeId} ${prediction.recommendedLotSize}\`
  `;

  // Create inline keyboard for quick actions
  const keyboard = createInlineKeyboard([
    [
      { text: `${strategyEmoji} Esegui ${prediction.recommendedLotSize}`, callback_data: `execute_${prediction.tradeId}_${prediction.recommendedLotSize}_${prediction.strategy}` },
      { text: `${strategyEmoji} Esegui 0.01`, callback_data: `execute_${prediction.tradeId}_0.01_${prediction.strategy}` }
    ],
    [
      { text: "‚ö° Scalping", callback_data: `strategy_SCALPING_${prediction.symbol}` },
      { text: "üìà Intraday", callback_data: `strategy_INTRADAY_${prediction.symbol}` },
      { text: "üéØ Swing", callback_data: `strategy_SWING_${prediction.symbol}` }
    ],
    [
      { text: "üìä Nuova Analisi", callback_data: "new_analysis" },
      { text: "üìà Performance", callback_data: "show_performance" }
    ]
  ]);

  await sendMessage(chatId, message, { replyMarkup: keyboard });

  // Send chart image if available
  if (prediction.chartUrl) {
    try {
      await sendPhoto(chatId, prediction.chartUrl, `üìä Analisi Grafico ${prediction.strategy} per ${prediction.symbol}`);
    } catch (error) {
      console.error("Error sending chart:", error);
      await sendMessage(chatId, `üìä Grafico: ${prediction.chartUrl}`);
    }
  }
}

async function handleExecuteCommand(chatId: number, command: string): Promise<void> {
  const parts = command.split(" ");
  const tradeId = parts[1];
  const lotSize = parseFloat(parts[2] || "0.1");
  const strategy = parts[3] || "INTRADAY";

  if (!tradeId) {
    await sendMessage(chatId, "‚ùå Fornisci un ID trade. Utilizzo: `/execute ID_TRADE DIMENSIONE_LOTTO [STRATEGIA]`");
    return;
  }

  if (isNaN(lotSize) || lotSize <= 0) {
    await sendMessage(chatId, "‚ùå Fornisci una dimensione lotto valida. Utilizzo: `/execute ID_TRADE DIMENSIONE_LOTTO [STRATEGIA]`");
    return;
  }

  try {
    await sendMessage(chatId, `‚ö° Esecuzione trade ${strategy} ${tradeId} con ${lotSize} lotti...`);
    
    const result = await analysis.execute({ tradeId, lotSize, strategy });
    
    if (result.success) {
      const message = `
‚úÖ **Trade ${strategy} Eseguito con Successo**

üÜî ID Trade: \`${tradeId}\`
üìã Ordine MT5: #${result.orderId}
üí∞ Dimensione Lotto: ${lotSize}
üíµ Prezzo di Ingresso: ${result.executionPrice}
‚è±Ô∏è Durata Stimata: ${result.estimatedHoldingTime}

üéØ Il tuo trade ${strategy.toLowerCase()} √® ora attivo su MT5!
      `;
      await sendMessage(chatId, message);
    } else {
      await sendMessage(chatId, `‚ùå **Esecuzione trade fallita**\n\nüö´ Errore: ${result.error}\n\nControlla la tua connessione MT5 e riprova.`);
    }
  } catch (error) {
    console.error("Execution error:", error);
    await sendMessage(chatId, "‚ùå Errore nell'esecuzione del trade. Controlla la tua connessione MT5 e riprova.");
  }
}

async function handleStartCommand(chatId: number): Promise<void> {
  const message = `
ü§ñ **Benvenuto nel Bot AI Trading Professionale**

Sono il tuo assistente di trading di livello istituzionale con **3 strategie specializzate**! 

üß† **Cosa mi rende diverso:**
‚Ä¢ **Analisi Smart Money** - Segue flussi istituzionali e pattern degli ordini
‚Ä¢ **Consenso Trader Professionali** - Segue i migliori trader per ogni asset
‚Ä¢ **Price Action Avanzata** - Analisi struttura di mercato e zone di liquidit√†
‚Ä¢ **Previsioni ML** - Nessun indicatore tradizionale, solo price action pura

‚ö° **Strategie di Trading:**
‚Ä¢ \`/scalping SIMBOLO\` - Trade veloci (1-15 minuti, stop stretti)
‚Ä¢ \`/intraday SIMBOLO\` - Day trading (1-8 ore, rischio bilanciato)
‚Ä¢ \`/swing SIMBOLO\` - Trade multi-giorno (1-7 giorni, target pi√π ampi)

üìä **Analisi Generale:**
‚Ä¢ \`/predict SIMBOLO\` - Selezione automatica strategia ottimale

‚ö° **Comandi di Esecuzione:**
‚Ä¢ \`/execute ID_TRADE DIMENSIONE_LOTTO [STRATEGIA]\` - Esegui trade su MT5

üñ•Ô∏è **Gestione VPS:**
‚Ä¢ \`/vps\` - Gestisci il tuo VPS e configurazione MT5
‚Ä¢ \`/vps_setup\` - Configura nuovo VPS automaticamente

üìà **Comandi Informativi:**
‚Ä¢ \`/status\` - Controlla stato bot e MT5
‚Ä¢ \`/performance\` - Visualizza performance di trading
‚Ä¢ \`/strategies\` - Impara le strategie di trading
‚Ä¢ \`/symbols\` - Lista simboli supportati

üìö **Aiuto:**
‚Ä¢ \`/help\` - Mostra aiuto dettagliato

üöÄ **Avvio Rapido:**
1. Usa \`/vps_setup\` per configurare il tuo VPS e MT5
2. Prova \`/scalping BTCUSD\` per un segnale scalping veloce!
3. Oppure \`/swing EURUSD\` per un'opportunit√† swing trading!

üí° **Consiglio Professionale:** Ogni strategia ha rapporti rischio/rendimento e tempi di mantenimento ottimizzati. Scegli in base al tuo stile di trading e tempo disponibile.
  `;
  
  const keyboard = createInlineKeyboard([
    [
      { text: "‚ö° Scalping BTCUSD", callback_data: "strategy_SCALPING_BTCUSD" },
      { text: "üìà Intraday EURUSD", callback_data: "strategy_INTRADAY_EURUSD" }
    ],
    [
      { text: "üéØ Swing XAUUSD", callback_data: "strategy_SWING_XAUUSD" },
      { text: "üñ•Ô∏è Configura VPS", callback_data: "vps_setup" }
    ],
    [
      { text: "üìä Guida Strategie", callback_data: "show_strategies" },
      { text: "‚ùì Aiuto", callback_data: "show_help" }
    ]
  ]);
  
  await sendMessage(chatId, message, { replyMarkup: keyboard });
}

async function handleStrategiesCommand(chatId: number): Promise<void> {
  const message = `
üìä **Guida Strategie di Trading Professionali**

**‚ö° STRATEGIA SCALPING**
‚Ä¢ **Timeframe:** 1-15 minuti
‚Ä¢ **Rischio/Rendimento:** 1:1.5
‚Ä¢ **Ideale per:** Profitti veloci, sessioni ad alto volume
‚Ä¢ **Stop Loss:** Stretto (0.8x ATR)
‚Ä¢ **Take Profit:** Veloce (1.2x ATR)
‚Ä¢ **Confidenza Min:** 85%
‚Ä¢ **Posizione Max:** 0.5 lotti
‚Ä¢ **Condizioni Ideali:** Alto volume, mercati in trend, spread bassi

**üìà STRATEGIA INTRADAY**
‚Ä¢ **Timeframe:** 1-8 ore
‚Ä¢ **Rischio/Rendimento:** 1:2.0
‚Ä¢ **Ideale per:** Day trading, approccio bilanciato
‚Ä¢ **Stop Loss:** Standard (1.0x ATR)
‚Ä¢ **Take Profit:** Standard (2.0x ATR)
‚Ä¢ **Confidenza Min:** 75%
‚Ä¢ **Posizione Max:** 1.0 lotti
‚Ä¢ **Condizioni Ideali:** Volume normale, mercati in trend, breakout

**üéØ STRATEGIA SWING**
‚Ä¢ **Timeframe:** 1-7 giorni
‚Ä¢ **Rischio/Rendimento:** 1:3.0
‚Ä¢ **Ideale per:** Trend multi-giorno, movimenti ampi
‚Ä¢ **Stop Loss:** Ampio (1.5x ATR)
‚Ä¢ **Take Profit:** Ampio (4.5x ATR)
‚Ä¢ **Confidenza Min:** 70%
‚Ä¢ **Posizione Max:** 2.0 lotti
‚Ä¢ **Condizioni Ideali:** Qualsiasi volume, inversioni, consolidamenti

**üéì Come Scegliere:**

**Scegli SCALPING quando:**
‚Ä¢ Puoi monitorare i trade attivamente
‚Ä¢ Il mercato √® in trend con alto volume
‚Ä¢ Vuoi profitti veloci
‚Ä¢ Ambiente a bassa volatilit√†

**Scegli INTRADAY quando:**
‚Ä¢ Fai trading durante le ore di mercato
‚Ä¢ Approccio rischio/rendimento bilanciato
‚Ä¢ Segui trend giornalieri
‚Ä¢ Condizioni di mercato normali

**Scegli SWING quando:**
‚Ä¢ Preferisci meno monitoraggio
‚Ä¢ Cerchi movimenti pi√π ampi
‚Ä¢ Segui trend multi-giorno
‚Ä¢ Maggiore volatilit√† √® accettabile

**üí° Consigli Professionali:**
‚Ä¢ Inizia con INTRADAY per approccio bilanciato
‚Ä¢ Usa SCALPING durante sessioni ad alto volume
‚Ä¢ Usa SWING per inversioni di trend importanti
‚Ä¢ Rispetta sempre i limiti di rischio della strategia

**‚ö° Comandi Rapidi:**
‚Ä¢ \`/scalping EURUSD\` - Genera segnale scalping
‚Ä¢ \`/intraday GBPUSD\` - Genera segnale intraday  
‚Ä¢ \`/swing XAUUSD\` - Genera segnale swing
‚Ä¢ \`/predict BTCUSD\` - Seleziona automaticamente la strategia migliore

Ogni strategia √® ottimizzata per diverse condizioni di mercato e stili di trading! üöÄ
  `;
  
  await sendMessage(chatId, message);
}

async function handleHelpCommand(chatId: number): Promise<void> {
  const message = `
üìö **Bot AI Trading Professionale - Guida Completa**

**‚ö° Comandi SCALPING:**
‚Ä¢ \`/scalping BTCUSD\` - Scalping Bitcoin veloce (1-15 min)
‚Ä¢ \`/scalping EURUSD\` - Opportunit√† scalping Euro
‚Ä¢ \`/scalping XAUUSD\` - Segnale scalping Oro

**üìà Comandi INTRADAY:**
‚Ä¢ \`/intraday EURUSD\` - Day trading Euro (1-8 ore)
‚Ä¢ \`/intraday GBPUSD\` - Analisi intraday Sterlina
‚Ä¢ \`/intraday CRUDE\` - Segnale day trading Petrolio

**üéØ Comandi SWING:**
‚Ä¢ \`/swing BTCUSD\` - Trade swing Bitcoin (1-7 giorni)
‚Ä¢ \`/swing XAUUSD\` - Opportunit√† swing Oro
‚Ä¢ \`/swing CRUDE\` - Analisi swing Petrolio

**üìä Analisi Generale:**
‚Ä¢ \`/predict SIMBOLO\` - Selezione automatica strategia ottimale
‚Ä¢ \`/predict\` - Analizza BTCUSD (predefinito)

**‚ö° Comandi Esecuzione:**
‚Ä¢ \`/execute BTC-001 0.1\` - Esegui con 0.1 lotti
‚Ä¢ \`/execute EUR-002 0.05 SCALPING\` - Esegui trade scalping
‚Ä¢ \`/execute XAU-003 0.2 SWING\` - Esegui trade swing

**üñ•Ô∏è Gestione VPS:**
‚Ä¢ \`/vps\` - Dashboard e gestione VPS
‚Ä¢ \`/vps_setup\` - Configurazione automatica VPS
‚Ä¢ \`/vps_status\` - Controlla stato VPS e MT5
‚Ä¢ \`/vps_restart\` - Riavvia bot trading su VPS
‚Ä¢ \`/vps_logs\` - Visualizza log VPS recenti

**üìä Comandi Informativi:**
‚Ä¢ \`/status\` - Stato connessione bot e MT5
‚Ä¢ \`/performance\` - Statistiche di trading
‚Ä¢ \`/strategies\` - Guida dettagliata strategie
‚Ä¢ \`/symbols\` - Tutti i simboli di trading supportati

**üéØ Caratteristiche Strategie:**

**‚ö° SCALPING (1-15 min):**
‚Ä¢ Stop stretti per protezione capitale
‚Ä¢ Presa di profitto veloce
‚Ä¢ Solo segnali ad alta confidenza
‚Ä¢ Ottimale durante sessioni ad alto volume

**üìà INTRADAY (1-8 ore):**
‚Ä¢ Rapporto rischio/rendimento bilanciato
‚Ä¢ Seguire direzione del trend
‚Ä¢ Chiudere prima della chiusura mercato
‚Ä¢ Monitorare notizie ed eventi

**üéØ SWING (1-7 giorni):**
‚Ä¢ Stop pi√π ampi per volatilit√†
‚Ä¢ Target di profitto pi√π grandi
‚Ä¢ Monitoraggio meno frequente
‚Ä¢ Focus su trend settimanali

**üí° Consigli Professionali:**
‚Ä¢ **Gestione Rischio:** Non rischiare mai pi√π del 2% per trade
‚Ä¢ **Selezione Strategia:** Scegli in base al tempo disponibile e condizioni di mercato
‚Ä¢ **Dimensione Posizione:** Usa le dimensioni lotto consigliate per rischio ottimale
‚Ä¢ **Monitoraggio:** Scalping richiede monitoraggio attivo, swing permette approccio passivo

**‚ö†Ô∏è Avviso di Rischio:**
Questo bot utilizza concetti di trading istituzionali avanzati. Usa sempre una gestione del rischio appropriata e non fare mai trading con denaro che non puoi permetterti di perdere.

Hai bisogno di pi√π aiuto? Prova i comandi specifici delle strategie! üí¨
  `;
  
  await sendMessage(chatId, message);
}

async function handleStatusCommand(chatId: number): Promise<void> {
  try {
    // This would check actual system status
    const message = `
üîß **Stato Sistema Trading Professionale**

üß† **Motore ML:** ‚úÖ Online (Modelli Avanzati Attivi)
ü§ñ **Gemini AI:** ‚úÖ Connesso (Analisi Professionale)
üìä **Smart Money Tracker:** ‚úÖ Attivo (Flusso Istituzionale)
üìà **Analizzatore Order Flow:** ‚úÖ Streaming (Tempo Reale)
üì∞ **Sentiment Notizie:** ‚úÖ Attivo (Multi-sorgente)
‚ö° **Bridge MT5:** ‚úÖ Connesso (Esecuzione Professionale)
üñ•Ô∏è **Gestore VPS:** ‚úÖ Attivo (Monitoraggio 24/7)

üí∞ **Info Account:**
‚Ä¢ Saldo: $10.000,00
‚Ä¢ Margine Libero: $9.500,00
‚Ä¢ Posizioni Aperte: 0
‚Ä¢ Livello Rischio: Conservativo

üéØ **Capacit√† Strategie:**
‚Ä¢ ‚ö° Scalping: ‚úÖ Attivo (trade 1-15 min)
‚Ä¢ üìà Intraday: ‚úÖ Attivo (trade 1-8 ore)
‚Ä¢ üéØ Swing: ‚úÖ Attivo (trade 1-7 giorni)
‚Ä¢ üìä Auto-Strategia: ‚úÖ Attivo (Selezione ottimale)

üïê **Ultimo Aggiornamento:** ${new Date().toLocaleString()}

Tutti i sistemi di trading professionali operativi! üöÄ

Usa \`/vps\` per gestire la tua connessione VPS e MT5.
    `;
    
    await sendMessage(chatId, message);
  } catch (error) {
    console.error("Status check error:", error);
    await sendMessage(chatId, "‚ùå Errore nel controllo dello stato del sistema. Riprova.");
  }
}

async function handlePerformanceCommand(chatId: number): Promise<void> {
  try {
    const performance = await analysis.getPerformance();
    
    const winRateEmoji = performance.winRate >= 70 ? "üî•" : performance.winRate >= 50 ? "‚ö°" : "‚ö†Ô∏è";
    const profitFactorEmoji = performance.profitFactor >= 2 ? "üî•" : performance.profitFactor >= 1 ? "‚ö°" : "‚ö†Ô∏è";
    
    const message = `
üìä **Performance Trading Professionale**

${winRateEmoji} **Tasso Vincita:** ${performance.winRate.toFixed(1)}%
${profitFactorEmoji} **Fattore Profitto:** ${performance.profitFactor.toFixed(2)}
üìà **Totale Segnali:** ${performance.totalTrades}
üí∞ **Profitto Medio:** $${performance.avgProfit.toFixed(2)}
üìâ **Perdita Media:** $${performance.avgLoss.toFixed(2)}
üéØ **Miglior Trade:** $${performance.bestTrade.toFixed(2)}
üìä **Confidenza Media:** ${performance.avgConfidence.toFixed(0)}%

**üß† Performance Modello ML:**
${getMLPerformanceRating(performance.winRate, performance.profitFactor)}

**üìà Performance Strategie:**
‚Ä¢ ‚ö° Scalping: Alta frequenza, gestione rischio stretta
‚Ä¢ üìà Intraday: Approccio bilanciato, buono per principianti
‚Ä¢ üéØ Swing: Movimenti pi√π ampi, monitoraggio ridotto richiesto

**üéØ Metriche Professionali:**
‚Ä¢ Rapporto Rischio/Rendimento: 1:${performance.profitFactor.toFixed(1)}
‚Ä¢ Sharpe Ratio: ${calculateSharpeRatio(performance)}
‚Ä¢ Drawdown Massimo: ${calculateMaxDrawdown(performance)}%
‚Ä¢ Fattore Recupero: ${calculateRecoveryFactor(performance)}

**üöÄ Raccomandazioni Strategie:**
‚Ä¢ Usa **SCALPING** per profitti veloci durante alto volume
‚Ä¢ Usa **INTRADAY** per trading giornaliero bilanciato
‚Ä¢ Usa **SWING** per movimenti pi√π ampi con meno monitoraggio

Continua a seguire lo smart money! üöÄ
    `;
    
    await sendMessage(chatId, message);
  } catch (error) {
    console.error("Performance error:", error);
    await sendMessage(chatId, "‚ùå Errore nel recupero dei dati di performance. Riprova.");
  }
}

async function handleSymbolsCommand(chatId: number): Promise<void> {
  const message = `
üìä **Simboli di Trading Supportati con Analisi Multi-Strategia**

**üí∞ Criptovalute:**
‚Ä¢ **BTCUSD** - Bitcoin (Tutte le strategie: ‚ö°üìàüéØ)
‚Ä¢ **ETHUSD** - Ethereum (Tutte le strategie: ‚ö°üìàüéØ)

**üí± Coppie Forex Principali:**
‚Ä¢ **EURUSD** - Euro/Dollaro (Ottimale per: ‚ö°üìà)
‚Ä¢ **GBPUSD** - Sterlina/Dollaro (Ottimale per: ‚ö°üìàüéØ)
‚Ä¢ **USDJPY** - Dollaro/Yen (Ottimale per: ‚ö°üìà)
‚Ä¢ **AUDUSD** - Dollaro Australiano (Ottimale per: üìàüéØ)
‚Ä¢ **USDCAD** - Dollaro/Canadese (Ottimale per: üìàüéØ)
‚Ä¢ **USDCHF** - Dollaro/Franco Svizzero (Ottimale per: üìàüéØ)

**ü•á Metalli Preziosi:**
‚Ä¢ **XAUUSD** - Oro (Ottimale per: üìàüéØ)

**üõ¢Ô∏è Commodities:**
‚Ä¢ **CRUDE** - Petrolio WTI (Ottimale per: üìàüéØ)
‚Ä¢ **BRENT** - Petrolio Brent (Ottimale per: üìàüéØ)

**üéØ Simboli Strategie:**
‚ö° = Eccellente per SCALPING (1-15 min)
üìà = Eccellente per INTRADAY (1-8 ore)  
üéØ = Eccellente per SWING (1-7 giorni)

**Esempi di Utilizzo:**
‚Ä¢ \`/scalping BTCUSD\` - Scalping Bitcoin
‚Ä¢ \`/intraday EURUSD\` - Day trading Euro
‚Ä¢ \`/swing XAUUSD\` - Swing trading Oro
‚Ä¢ \`/predict GBPUSD\` - Selezione automatica strategia migliore

**üí° Consigli Selezione Strategia:**
‚Ä¢ **Crypto (BTC/ETH):** Ottime per tutte le strategie grazie al trading 24/7
‚Ä¢ **Forex Principali:** Migliori per scalping e intraday durante ore di mercato
‚Ä¢ **Oro/Petrolio:** Eccellenti per swing trading grazie a movimenti pi√π ampi
‚Ä¢ **Coppie Minori:** Migliori per strategie intraday e swing

Altri simboli e funzionalit√† avanzate in arrivo presto! üöÄ
  `;
  
  await sendMessage(chatId, message);
}

function getSentimentEmoji(score: number): string {
  if (score > 0.5) return "üî•";
  if (score > 0.2) return "üìà";
  if (score > -0.2) return "üòê";
  if (score > -0.5) return "üìâ";
  return "üî¥";
}

function getMLPerformanceRating(winRate: number, profitFactor: number): string {
  if (winRate >= 75 && profitFactor >= 2.5) {
    return "üî• **Eccezionale** - Performance di livello istituzionale!";
  } else if (winRate >= 65 && profitFactor >= 2) {
    return "‚ö° **Professionale** - Previsioni ML di alta qualit√†!";
  } else if (winRate >= 55 && profitFactor >= 1.5) {
    return "üìä **Buono** - Risultati machine learning solidi!";
  } else {
    return "‚ö†Ô∏è **Apprendimento** - Modelli ML che si adattano alle condizioni di mercato.";
  }
}

function calculateSharpeRatio(performance: any): string {
  // Simplified Sharpe ratio calculation
  const avgReturn = performance.avgProfit * (performance.winRate / 100) + 
                   performance.avgLoss * ((100 - performance.winRate) / 100);
  const volatility = Math.abs(performance.avgProfit - performance.avgLoss);
  const sharpe = avgReturn / (volatility || 1);
  return sharpe.toFixed(2);
}

function calculateMaxDrawdown(performance: any): string {
  // Simplified max drawdown estimation
  const worstCase = Math.abs(performance.worstTrade);
  const avgProfit = performance.avgProfit;
  const drawdown = (worstCase / (avgProfit || 1)) * 100;
  return Math.min(50, drawdown).toFixed(1);
}

function calculateRecoveryFactor(performance: any): string {
  // Recovery factor = Total Profit / Max Drawdown
  const totalProfit = performance.avgProfit * performance.totalTrades * (performance.winRate / 100);
  const maxDrawdown = Math.abs(performance.worstTrade);
  const recovery = totalProfit / (maxDrawdown || 1);
  return recovery.toFixed(1);
}
