import { api } from "encore.dev/api";
import { getMT5Positions, MT5Position } from "./mt5-bridge";
import { analysisDB } from "./db";

interface ListPositionsResponse {
  positions: MT5Position[];
}

// Retrieves the open positions from MT5 account.
export const listPositions = api<void, ListPositionsResponse>({
  method: "GET",
  path: "/analysis/positions",
  expose: true,
}, async () => {
  try {
    // Use your actual VPS MT5 config
    const mt5Config = {
      host: "154.61.187.189", // Your actual VPS IP
      port: 8080,
      login: "6001637", // Your actual MT5 account
      server: "PureMGlobal-MT5", // Your actual server
      password: "demo"
    };

    console.log("Fetching positions from MT5");

    // Get all open positions from the MT5 terminal
    const allPositions = await getMT5Positions(mt5Config);
    console.log(`Retrieved ${allPositions.length} positions from MT5`);

    // Get all executed, non-closed trade IDs
    const userTradeSignals = await analysisDB.queryAll`
      SELECT trade_id FROM trading_signals
      WHERE status = 'executed'
    `;
    const userTradeIds = new Set(userTradeSignals.map(s => s.trade_id));
    console.log(`Found ${userTradeIds.size} executed trades`);

    // Filter positions to only include those generated by signals
    const userPositions = allPositions.filter(p => {
      // The trade ID is expected to be in the comment
      const tradeId = p.comment?.split('_')[1];
      return tradeId && userTradeIds.has(tradeId);
    });

    console.log(`Filtered to ${userPositions.length} user-specific positions`);
    return { positions: userPositions };

  } catch (error) {
    console.error(`Error getting positions:`, error);
    // Return empty array instead of throwing error to prevent UI crashes
    return { positions: [] };
  }
});
