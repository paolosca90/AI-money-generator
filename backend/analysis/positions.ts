import { api } from "encore.dev/api";
import { getAuthData } from "~encore/auth";
import { user } from "~encore/clients";
import { getMT5Positions, MT5Position } from "./mt5-bridge";
import { analysisDB } from "./db";

interface ListPositionsResponse {
  positions: MT5Position[];
}

// Retrieves the open positions for the authenticated user from their MT5 account.
export const listPositions = api<void, ListPositionsResponse>({
  auth: true,
  method: "GET",
  path: "/analysis/positions",
  expose: true,
}, async () => {
  const auth = getAuthData()!;

  // Get user's MT5 config
  const mt5Config = await user.getMt5Config();
  if (!mt5Config.config) {
    return { positions: [] };
  }

  // Get all open positions from the user's MT5 terminal
  const allPositions = await getMT5Positions(mt5Config.config);

  // Get all executed, non-closed trade IDs for the current user
  const userTradeSignals = await analysisDB.queryAll`
    SELECT trade_id FROM trading_signals
    WHERE user_id = ${auth.userID} AND status = 'executed'
  `;
  const userTradeIds = new Set(userTradeSignals.map(s => s.trade_id));

  // Filter positions to only include those generated by this user's signals
  const userPositions = allPositions.filter(p => {
    // The trade ID is expected to be in the comment
    const tradeId = p.comment?.split('_')[1];
    return tradeId && userTradeIds.has(tradeId);
  });

  return { positions: userPositions };
});
