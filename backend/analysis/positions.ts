import { api } from "encore.dev/api";
import { getAuthData } from "~encore/auth";
import { user } from "~encore/clients";
import { getMT5Positions, MT5Position } from "./mt5-bridge";
import { analysisDB } from "./db";

interface ListPositionsResponse {
  positions: MT5Position[];
}

// Retrieves the open positions for the authenticated user from their MT5 account.
export const listPositions = api<void, ListPositionsResponse>({
  auth: true,
  method: "GET",
  path: "/analysis/positions",
  expose: true,
}, async () => {
  const auth = getAuthData()!;

  try {
    // Get user's MT5 config
    const mt5ConfigResponse = await user.getMt5Config();
    if (!mt5ConfigResponse.config) {
      console.log(`No MT5 config found for user ${auth.userID}`);
      return { positions: [] };
    }

    // Get all open positions from the user's MT5 terminal
    const allPositions = await getMT5Positions(mt5ConfigResponse.config);
    console.log(`Retrieved ${allPositions.length} positions from MT5 for user ${auth.userID}`);

    // Get all executed, non-closed trade IDs for the current user
    const userTradeSignals = await analysisDB.queryAll`
      SELECT trade_id FROM trading_signals
      WHERE user_id = ${auth.userID} AND status = 'executed'
    `;
    const userTradeIds = new Set(userTradeSignals.map(s => s.trade_id));
    console.log(`Found ${userTradeIds.size} executed trades for user ${auth.userID}`);

    // Filter positions to only include those generated by this user's signals
    const userPositions = allPositions.filter(p => {
      // The trade ID is expected to be in the comment
      const tradeId = p.comment?.split('_')[1];
      return tradeId && userTradeIds.has(tradeId);
    });

    console.log(`Filtered to ${userPositions.length} user-specific positions`);
    return { positions: userPositions };

  } catch (error) {
    console.error(`Error getting positions for user ${auth.userID}:`, error);
    // Return empty array instead of throwing error to prevent UI crashes
    return { positions: [] };
  }
});
